openapi: 3.0.1
info:
  title: ShopDB API
  description: This is the API for shopdb2
  version: v2
servers:
- url: https://shop.gatrobe.de/api
tags:
- name: rank
  description: Access available ranks
paths:
  /:
    get:
      tags:
      - maintenance
      summary: Returns the current state of the api
      responses:
        200:
          description: State was successfully retrieved
          content:
            '*/*':
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Backend is online.
  /backups:
    get:
      tags:
      - backup
      summary: Returns a dict holding all backups and the timestamp of the latest
        one.
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  backups:
                    type: array
                    items:
                      type: string
                      example: 2019/02/07/shop-db_2019-02-07_15-00.dump
                  latest:
                    type: string
                    format: date-time
      security:
      - bearerAuth: []
  /deposits:
    get:
      tags:
      - deposit
      summary: Returns a list of all deposits.
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Deposit'
      security:
      - bearerAuth: []
    post:
      tags:
      - deposit
      summary: Add a new deposit
      operationId: addDeposit
      requestBody:
        description: Deposit object that needs to be added
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: integer
                  format: int64
                comment:
                  type: string
                user_id:
                  type: integer
                  format: int64
        required: true
      responses:
        200:
          description: Deposit was sucessfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Created deposit.
        401:
          description: error state
          content: {}
      x-codegen-request-body-name: body
      security:
      - bearerAuth: []
  /deposits/batch:
    post:
      tags:
      - deposit
      summary: Add a batch of new deposits
      description: Iterates over the given user ids and creates a deposit for each
        of them
      operationId: addDeposits
      requestBody:
        description: List of user ids, the amount as well as the comment
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: integer
                  format: int64
                comment:
                  type: string
                user_ids:
                  type: array
                  items:
                    type: integer
                    format: int64
        required: true
      responses:
        200:
          description: Deposit was sucessfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Created batch deposit.
        401:
          description: error state
          content: {}
      x-codegen-request-body-name: body
      security:
      - bearerAuth: []
  /deposits/{deposit-id}:
    parameters:
    - name: deposit-id
      in: path
      required: true
      schema:
        type: integer
    get:
      tags:
      - deposit
      summary: Returns the deposit with the requested id.
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                  timestamp:
                    type: string
                    format: date-time
                  user_id:
                    type: integer
                    format: int64
                  amount:
                    type: integer
                    format: int64
                  comment:
                    type: string
                  revoked:
                    type: boolean
                  revokehistory:
                    type: array
                    items:
                      $ref: '#/components/schemas/Revoke'
    put:
      tags:
      - deposit
      summary: Updates a deposit
      description: This can only be done by an admin.
      operationId: updateDeposit
      requestBody:
        description: Updated deposit revocation state
        content:
          '*/*':
            schema:
              type: object
              properties:
                revoked:
                  type: boolean
        required: true
      responses:
        201:
          description: Deposit was sucessfully updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Updated deposit.
        401:
          description: error state
          content: {}
      x-codegen-request-body-name: body
      security:
      - bearerAuth: []
  /financial_overview:
    get:
      tags:
      - financial overview
      summary: Returns the current financial overview of the shopdb instance
      description: The financial status of the entire project can be retrieved via
        this route. All purchases, deposits, payoffs, refunds and replenishmentcollections
        are used for this purpose. The items are cleared once to a number indicating
        whether the community has debt or surplus money. In addition, the individual
        items are returned separately in order to get a better breakdown of the items.
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_balance:
                    type: integer
                    format: int64
                  incomes:
                    type: object
                    properties:
                      Purchases:
                        minimum: 0
                        type: integer
                        format: int64
                      Deposits:
                        minimum: 0
                        type: integer
                        format: int64
                      Turnovers:
                        minimum: 0
                        type: integer
                        format: int64
                      Replenishments:
                        minimum: 0
                        type: integer
                        format: int64
                      Refunds:
                        minimum: 0
                        type: integer
                        format: int64
                      Payoffs:
                        minimum: 0
                        type: integer
                        format: int64
                      Stocktakings:
                        minimum: 0
                        type: integer
                        format: int64
                  expenses:
                    type: object
                    properties:
                      Purchases:
                        minimum: 0
                        type: integer
                        format: int64
                      Deposits:
                        minimum: 0
                        type: integer
                        format: int64
                      Turnovers:
                        minimum: 0
                        type: integer
                        format: int64
                      Replenishments:
                        minimum: 0
                        type: integer
                        format: int64
                      Refunds:
                        minimum: 0
                        type: integer
                        format: int64
                      Payoffs:
                        minimum: 0
                        type: integer
                        format: int64
                      Stocktakings:
                        minimum: 0
                        type: integer
                        format: int64
      security:
      - bearerAuth: []
  /images:
    get:
      tags:
      - image
      summary: A defaullt picture can be requested via this route.
      responses:
        200:
          description: A png file
          content:
            '*/*':
              schema:
                type: string
                description: the default product image
                format: binary
  /images/{image-name}:
    get:
      tags:
      - image
      summary: A picture can be requested via this route.
      description: If the image is not found or if the image name is empty, a default
        image will be returned.
      parameters:
      - name: image-name
        in: path
        description: 'can be left empty to retrieve the default image'
        required: true
        schema:
          type: string
      responses:
        200:
          description: A png file
          content:
            '*/*':
              schema:
                type: string
                description: the requested product image
                format: binary
  /login:
    post:
      tags:
      - user
      summary: Logs user into the system
      operationId: loginUser
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: boolean
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoibWFuaXNoIn0.JX4_nxeJAY8lOSrTiyzU43eKt-qEWXtNhkPwfLWanUY"
  /maintenance:
    post:
      tags:
      - maintenance
      summary: Set the maintenance state
      operationId: toggleMaintenance
      requestBody:
        description: "contains the new state"
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  type: boolean
        required: true
      responses:
        200:
          description: Deposit was sucessfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Turned maintenance mode off."
      security:
      - bearerAuth: []
  /payoffs:
    get:
      tags:
      - payoff
      summary: Returns a list of all payoffs.
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Payoff'
      security:
      - bearerAuth: []
    post:
      tags:
      - payoff
      summary: Creates a new Payoff.
      operationId: addPayoff
      requestBody:
        description: "the amount paid out as well as the reason"
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: integer
                  format: int64
                comment:
                  type: string
        required: true
      responses:
        200:
          description: Payout was sucessfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Created payoff."
      security:
      - bearerAuth: []
  /payoffs/{payoff-id}:
    parameters:
    - name: payoff-id
      in: path
      required: true
      schema:
        type: integer
    get:
      tags:
      - payoff
      summary: Returns the payoff with the requested id.
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                  timestamp:
                    type: string
                    format: date-time
                  amount:
                    type: integer
                    format: int64
                  comment:
                    type: string
                  revoked:
                    type: boolean
                  revokehistory:
                    type: array
                    items:
                      $ref: '#/components/schemas/PayoffRevoke'
    put:
      tags:
      - payoff
      summary: Updates a payoff
      description: This can only be done by an admin.
      operationId: updatePayoff
      requestBody:
        description: Updated payoff revocation state
        content:
          '*/*':
            schema:
              type: object
              properties:
                revoked:
                  type: boolean
        required: true
      responses:
        201:
          description: Deposit was sucessfully updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Updated deposit.
        401:
          description: error state
          content: {}
      x-codegen-request-body-name: body
      security:
      - bearerAuth: []
  /products:
    get:
      tags:
      - product
      summary: Returns a list of all products.
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
      security:
      - bearerAuth: []
    post:
      tags:
      - product
      summary: Add a new product
      operationId: addProduct
      requestBody:
        description: Product object that needs to be added
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                price:
                  type: integer
                  format: int64
                tags:
                  type: array
                  items:
                    type: integer
                    format: int64
                active:
                  type: boolean
                barcode:
                  type: string
                countable:
                  type: boolean
                imagename:
                  type: string
                revocable:
                  type: boolean
        required: true
      responses:
        200:
          description: Product was sucessfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Created Product.
        401:
          description: error state
          content: {}
      security:
      - bearerAuth: []
  /products/{product-id}: {}
  /products/{product-id}/pricehistory: {}
  /purchases: {}
  /purchases/{purchase-id}: {}
  /ranks:
    get:
      tags:
      - rank
      summary: Returns a list of all ranks.
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Rank'
  /refunds: {}
  /refunds/{refund-id}: {}
  /register: {}
  /replenishmentcollections: {}
  /replenishmentcollections/{replenishmentcollections-id}: {}
  /replenishments/{replenishment-id}: {}
  /stocktakingcollections: {}
  /stocktakingcollections/{stocktakingcollections-id}: {}
  /stocktakings/{stocktaking-id}: {}
  /tagassignment/{command}: {}
  /tags:
    get:
      tags:
      - tag
      summary: List all tags
      description: Every product has one or more of these.
      operationId: listTags
      parameters:
      - name: id
        in: path
        description: The id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tag'
        401:
          description: error state
          content: {}
  /tags/{tag-id}: {}
  /turnovers: {}
  /turnovers/{turnover-id}: {}
  /upload: {}
  /users: {}
  /users/{user-id}:
    get:
      tags:
      - user
      summary: Returns a user
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          description: error state
          content: {}
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by an admin.
      operationId: deleteUser
      parameters:
      - name: id
        in: path
        description: The id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        401:
          description: error state
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteUserError'
  /users/{user-id}/deposits: {}
  /users/{user-id}/favourites: {}
  /users/{user-id}/purchases: {}
  /users/{user-id}/refunds: {}
  /verifications:
    get:
      tags:
      - verification
      summary: Returns a list of all verifications.
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Verification'
components:
  schemas:
    Deposit:
      required:
      - id
      type: object
      properties:
        admin_id:
          type: integer
          format: int64
        amount:
          type: integer
          format: int64
        comment:
          type: string
        id:
          type: integer
          format: int64
        revoked:
          type: boolean
        timestamp:
          type: string
          format: date-time
        user_id:
          type: integer
          format: int64
    Payoff:
      required:
      - admin_id
      - amount
      - comment
      - id
      - revoked
      - timestamp
      properties:
        admin_id:
          type: "integer"
          format: "int64"
        amount:
          type: "integer"
          format: "int64"
        comment:
          type: "string"
        id:
          type: "integer"
          format: "int64"
        revoked:
          type: "boolean"
        timestamp:
          type: "string"
          format: "date-time"
    Product:
      required:
      - creation_date
      - id
      - name
      - price
      - tags
      type: object
      properties:
        active:
          type: boolean
        barcode:
          type: string
          example: "4004870070190"
        countable:
          type: boolean
        creation_date:
          type: string
          format: date-time
        id:
          type: integer
          format: int64
        imagename:
          type: string
          example: db2d6309800a5af05f9814bea1f5cea0.png
        name:
          type: string
        price:
          type: integer
          format: int64
        revocable:
          type: boolean
        tags:
          type: array
          items:
            type: integer
            format: int64
    Rank:
      required:
      - active
      - debt_limit
      - id
      - name
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        active:
          type: boolean
        debt_limit:
          type: integer
          format: int64
    StocktakingCollection:
      type: object
    Tag:
      required:
      - id
      type: object
      properties:
        created_by:
          type: integer
          format: int64
        id:
          type: integer
          format: int64
        name:
          type: string
          example: snacks
    Turnover:
      type: object
    UserError:
      required:
      - message
      - result
      type: object
      properties:
        message:
          type: string
          example: This user has not been verified yet.
        result:
          type: string
          enum:
          - error
    DeleteUserError:
      required:
      - message
      - result
      type: object
      properties:
        message:
          type: string
          example: There is no entry with this id.
        result:
          type: string
          enum:
          - error
    Revoke:
      required:
      - id
      - revoked
      - timestamp
      type: object
      properties:
        id:
          type: integer
          format: int64
        revoked:
          type: boolean
        timestamp:
          type: string
          format: date-time
    PayoffRevoke:
      allOf:
      - $ref: '#/components/schemas/Revoke'
    User:
      required:
      - creation_date
      - credit
      - firstname
      - id
      - is_admin
      - lastname
      - rank_id
      - verification_date
      type: object
      properties:
        id:
          type: integer
          format: int64
        firstname:
          type: string
          example: Paul Thomas
        lastname:
          type: string
          example: Mann
        credit:
          type: integer
          description: Users credit in cents
          format: int64
        rank_id:
          type: integer
          format: int64
        is_admin:
          type: boolean
        creation_date:
          type: string
          format: date-time
        verification_date:
          type: string
          format: date-time
    Verification:
      required:
      - id
      type: object
      properties:
        id:
          type: integer
          format: int64
        firstname:
          type: string
          example: Paul Thomas
        lastname:
          type: string
          example: Mann
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT 
