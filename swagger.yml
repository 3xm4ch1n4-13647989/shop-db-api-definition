swagger: '2.0'
info:
    title: ShopDB API
    description: This is the API for shopdb2
    version: v2
host: "shop.gatrobe.de"
basePath: "/api"
schemes:
- https
tags:
- name: "rank"
  description: "Access available ranks"
paths:
    /:
        get:
          tags:
          - "maintenance"
          summary: "Returns the current state of the api"
          responses:
            200:
              description: "State was successfully retrieved"
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                    example: "Backend is online."
    /backups:
        get:
          security:
          - bearerAuth: []
          tags:
          - "backup"
          summary: "Returns a dict holding all backups and the timestamp of the latest one."
          produces:
          - "application/json"
          responses:
            200:
              description: "successful operation"
              schema:
                type: "object"
                properties:
                  backups:
                    type: "array"
                    items:
                      type: "string"
                      example: "2019/02/07/shop-db_2019-02-07_15-00.dump"
                  latest:
                    type: "string"
                    format: "date-time"
    /deposits:
        get:
          tags:
          - "deposit"
          summary: "Returns a list of all deposits."
          produces:
          - "application/json"
          responses:
            200:
              description: "successful operation"
              schema:
                type: "array"
                items:
                  $ref: "#/definitions/Deposit"
        post:
          tags:
          - "deposit"
          summary: "Add a new deposit"
          description: ""
          operationId: "addDeposit"
          consumes:
          - "application/json"
          produces:
          - "application/json"
          parameters:
          - in: "body"
            name: "body"
            description: "Deposit object that needs to be added"
            required: true
            schema:
              type: "object"
              properties:
                amount:
                  type: "integer"
                  format: "int64"
                comment:
                  type: "string"
                user_id:
                  type: "integer"
                  format: "int64"
          responses:
            200:
              description: "Deposit was sucessfully created"
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                    example: "Created deposit."
            401:
              description: "error state"
    /deposits/batch:
        post:
          tags:
          - "deposit"
          summary: "Add a batch of new deposits"
          description: "Iterates over the given user ids and creates a deposit for each of them"
          operationId: "addDeposits"
          consumes:
          - "application/json"
          produces:
          - "application/json"
          parameters:
          - in: "body"
            name: "body"
            description: "List of user ids, the amount as well as the comment"
            required: true
            schema:
              type: "object"
              properties:
                amount:
                  type: "integer"
                  format: "int64"
                comment:
                  type: "string"
                user_ids:
                  type: "array"
                  items:
                    type: "integer"
                    format: "int64"
          responses:
            200:
              description: "Deposit was sucessfully created"
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                    example: "Created batch deposit."
            401:
              description: "error state"
    /deposits/{deposit-id}:
        get:
          tags:
          - "deposit"
          summary: "Returns the deposit with the requested id."
          produces:
          - "application/json"
          responses:
            200:
              description: "successful operation"
              schema:
                type: "object"
                properties:
                  id:
                    type: "integer"
                    format: "int64"
                  timestamp:
                    type: "string"
                    format: "date-time"
                  user_id:
                    type: "integer"
                    format: "int64"
                  amount:
                    type: "integer"
                    format: "int64"
                  comment:
                    type: "string"
                  revoked:
                    type: "boolean"
                  revokehistory:
                    type: "array"
                    items:
                      $ref: '#/definitions/Revoke'
        put:
          tags:
          - "deposit"
          summary: "Updates a deposit"
          description: "This can only be done by an admin."
          operationId: "updateDeposit"
          produces:
          - "application/json"
          parameters:
          - in: "body"
            name: "body"
            description: "Updated deposit revocation state"
            required: true
            schema:
              type: "object"
              properties:
                revoked:
                  type: "boolean"
          responses:
            201:
              description: "Deposit was sucessfully updated"
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                    example: "Updated deposit."
            401:
              description: "error state"
    /financial_overview:
        get:
          tags:
          - "financial overview"
          summary: "Returns the current financial overview of the shopdb instance"
          description: "The financial status of the entire project can be retrieved via this route.
                        All purchases, deposits, payoffs, refunds and replenishmentcollections are
                        used for this purpose. The items are cleared once to a number indicating
                        whether the community has debt or surplus money. In addition, the
                        individual items are returned separately in order to get a better
                        breakdown of the items."
          produces:
          - "application/json"
          responses:
            200:
              description: "successful operation"
              schema:
                type: "object"
                properties:
                  total_balance:
                    type: "integer"
                    format: "int64"
                  incomes:
                    type: "object"
                    properties:
                      Purchases:
                        type: "integer"
                        format: "int64"
                        minimum: 0
                      Deposits:
                        type: "integer"
                        format: "int64"
                        minimum: 0
                      Turnovers:
                        type: "integer"
                        format: "int64"
                        minimum: 0
                      Replenishments:
                        type: "integer"
                        format: "int64"
                        minimum: 0
                      Refunds:
                        type: "integer"
                        format: "int64"
                        minimum: 0
                      Payoffs:
                        type: "integer"
                        format: "int64"
                        minimum: 0
                      Stocktakings:
                        type: "integer"
                        format: "int64"
                        minimum: 0
                  expenses:
                    type: "object"
                    properties:
                      Purchases:
                        type: "integer"
                        format: "int64"
                        minimum: 0
                      Deposits:
                        type: "integer"
                        format: "int64"
                        minimum: 0
                      Turnovers:
                        type: "integer"
                        format: "int64"
                        minimum: 0
                      Replenishments:
                        type: "integer"
                        format: "int64"
                        minimum: 0
                      Refunds:
                        type: "integer"
                        format: "int64"
                        minimum: 0
                      Payoffs:
                        type: "integer"
                        format: "int64"
                        minimum: 0
                      Stocktakings:
                        type: "integer"
                        format: "int64"
                        minimum: 0
    /images:
        get:
          tags:
          - "image"
          summary: "A defaullt picture can be requested via this route."
          responses:
            200:
              description: A png file
              schema:
                type: file
                description: the default product image
    /images/{image-name}:
        get:
          tags:
          - "image"
          summary: "A picture can be requested via this route."
          description: "If the image is not found or if the image name is empty, a default image will be returned."
          parameters:
          - name: "image-name"
            in: "path"
            description: "can be left empty to retrieve the "
            required: true
            type: "string"
          responses:
            200:
              description: A png file
              schema:
                type: file
                description: the requested product image
    /login:
        post:
    /maintenance:
        post:
    /payoffs:
        get:
        post:
    /payoffs/{payoff-id}:
        get:
        put:
    /products:
        get:
        post:
    /products/{product-id}:
        get:
        put:
    /products/{product-id}/pricehistory:
        get:
    /purchases:
        get:
        post:
    /purchases/{purchase-id}:
        get:
        put:
    /ranks:
        get:
          tags:
          - "rank"
          summary: "Returns a list of all ranks."
          produces:
          - "application/json"
          responses:
            200:
              description: "successful operation"
              schema:
                type: "array"
                items:
                  $ref: "#/definitions/Rank"
    /refunds:
        get:
        post:
    /refunds/{refund-id}:
        get:
        put:
    /register:
        post:
    /replenishmentcollections:
        get:
        post:
    /replenishmentcollections/{replenishmentcollections-id}:
        get:
        post:
    /replenishments/{replenishment-id}:
        put:
    /stocktakingcollections:
        get:
        post:
    /stocktakingcollections/{stocktakingcollections-id}:
        get:
        put:
    /stocktakings/{stocktaking-id}:
        put:
    /tagassignment/{command}:
        post:
    /tags:
        get:
          tags:
          - "tag"
          summary: "List all tags"
          description: "Every product has one or more of these."
          operationId: "listTags"
          produces:
          - "application/json"
          parameters:
          - name: "id"
            in: "path"
            description: "The id"
            required: true
            type: "integer"
            format: "int64"
          responses:
            200:
              description: "successful operation"
              schema:
                type: "array"
                items:
                  $ref: "#/definitions/Tag"
            401:
              description: "error state"
        post:
    /tags/{tag-id}:
        delete:
        get:
        put:
    /turnovers:
        get:
        put:
    /turnovers/{turnover-id}:
        get:
        put:
    /upload:
        post:
    /users:
        get:
    /users/{user-id}:
        delete:
          tags:
          - "user"
          summary: "Delete user"
          description: "This can only be done by an admin."
          operationId: "deleteUser"
          produces:
          - "application/json"
          parameters:
          - name: "id"
            in: "path"
            description: "The id"
            required: true
            type: "integer"
            format: "int64"
          responses:
            401:
              description: "error state"
              schema:
                $ref: "#/definitions/DeleteUserError"
        get:
          tags:
          - "user"
          summary: "Returns a user"
          produces:
          - "application/json"
          responses:
            200:
              description: "successful operation"
              schema:
                $ref: "#/definitions/User"
            401:
              description: "error state"
        put:
    /users/{user-id}/deposits:
        get:
    /users/{user-id}/favourites:
        get:
    /users/{user-id}/purchases:
        get:
    /users/{user-id}/refunds:
        get:
    /verifications:
        get:
          tags:
          - "verification"
          summary: "Returns a list of all verifications."
          produces:
          - "application/json"
          responses:
            200:
              description: "successful operation"
              schema:
                type: "array"
                items:
                  $ref: "#/definitions/Verification"
    /verify/{verification-id}:
definitions:
  Deposit:
      type: object
      required:
          - id
      properties:
        admin_id:
          type: "integer"
          format: "int64"
        amount:
          type: "integer"
          format: "int64"
        comment:
          type: "string"
        id:
          type: "integer"
          format: "int64"
        revoked:
          type: "boolean"
        timestamp:
          type: "string"
          format: "date-time"
        user_id:
            type: "integer"
            format: "int64"
  Product:
      type: object
      required:
          - active
          - barcode
          - countable
          - creation_date
          - id
          - imagename
          - name
          - price
          - revocable
          - tags
      properties:
        active:
            type: "boolean"
        barcode:
            type: "string"
            example: "4004870070190"
            nullable: true
        countable:
            type: "boolean"
        creation_date:
            type: "string"
            format: "date-time"
        id:
            type: "integer"
            format: "int64"
        imagename:
            type: "string"
            nullable: true
            example: "db2d6309800a5af05f9814bea1f5cea0.png"
        name:
            type: "string"
        price:
            type: "integer"
            format: "int64"
        revocable:
            type: "boolean"
        tags:
            type: array
            items:
              type: "integer"
              format: "int64"
  Rank:
      type: object
      required:
          - id
          - name
          - active
          - debt_limit
      properties:
          id:
              type: "integer"
              format: "int64"
          name:
              type: "string"
          active:
              type: "boolean"
          debt_limit:
              type: "integer"
              format: "int64"
  StocktakingCollection:
      type: object
      required:
          - id
  Tag:
      type: object
      required:
          - id
      properties:
          created_by:
              type: "integer"
              format: "int64"
          id:
              type: "integer"
              format: "int64"
          name:
              type: string
              example: "snacks"
  Turnover:
      type: object
      required:
          - id
  UserError:
      type: object
      required:
        - message
        - result
      properties:
        message:
          type: string
          example: "This user has not been verified yet."
        result:
          type: string
          enum: 
          - "error"
  DeleteUserError:
      type: object
      required:
        - message
        - result
      properties:
        message:
          type: string
          example: "There is no entry with this id."
        result:
          type: string
          enum: 
          - "error"
  Revoke:
      type: "object"
      required:
        - id
        - revoked
        - timestamp
      properties:
        id:
          type: "integer"
          format: "int64"
        revoked:
          type: "boolean"
        timestamp:
          type: "string"
          format: "date-time"
        
        
  User:
      type: object
      required:
        - id
        - firstname
        - lastname
        - credit
        - rank_id
        - is_admin
        - creation_date
        - verification_date
      properties:
        id:
          type: "integer"
          format: "int64"
        firstname:
          type: "string"
          example: "Paul Thomas"
        lastname:
          type: "string"
          example: "Mann"
        credit:
          type: "integer"
          description: "Users credit in cents"
          format: "int64"
        rank_id:
          type: "integer"
          format: "int64"
        is_admin:
          type: "boolean"
        creation_date:
          type: "string"
          format: "date-time"
        verification_date:
          type: "string"
          format: "date-time"
  Verification:
      type: object
      required:
          - id
      properties:
        id:
          type: "integer"
          format: "int64"
        firstname:
          type: "string"
          example: "Paul Thomas"
        lastname:
          type: "string"
          example: "Mann"
